#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: Manual skupper-router image build
on:
  workflow_dispatch:
    inputs:
      protonSourceUrl:
        description: 'Qpid Proton source code url that returns a tar ball for a given branch'
        required: true
        default: 'http://github.com/apache/qpid-proton/archive/main.tar.gz'
      dockerTag:
        description: 'Docker tag to use for the skupper-router image'
        required: true
        default: 'custom'
jobs:
  build-manual:
    name: Build and publish skupper-router image
    runs-on: ubuntu-latest
    steps:

      - name: validate DOCKER_TAG
        run: |
          [[ ! "${DOCKER_TAG}" =~ ^[a-z0-9][a-z0-9.-]+[a-z0-9]$ ]] && echo "invalid tag - it must begin and end with letter or digit and contains - and ." && exit 1
          protected=(latest nightly master)
          for ptag in ${protected[@]}; do
            if [[ "${ptag}" = "${DOCKER_TAG}" ]]; then
              echo "${ptag} cannot be used (protected tag)"
              exit 1
            fi
          done
        env:
          DOCKER_TAG: '${{github.event.inputs.dockerTag}}'

      - uses: actions/checkout@v2

      - name: build, run tests and if all worked publish a custom image
        run: |
          . ./.github/scripts/common.sh
          export PROJECT_TAG="${DOCKER_TAG}"
          ./.github/scripts/image.sh
        env:
          DOCKER_USER: '${{ secrets.DOCKER_USER }}'
          DOCKER_PASSWORD: '${{ secrets.DOCKER_PASSWORD }}'
          PROTON_SOURCE_URL: '${{github.event.inputs.protonSourceUrl}}'
          DOCKER_TAG: '${{github.event.inputs.dockerTag}}'

      - name: upload image as artifact
        run: |
          export PROJECT_TAG="${DOCKER_TAG}"
          export PROJECT_NAME=skupper-router
          docker save "${PROJECT_NAME}:${PROJECT_TAG}" > myimage.tgz
          echo "${PROJECT_NAME}:${PROJECT_TAG}" > image.txt
        env:
          DOCKER_TAG: '${{github.event.inputs.dockerTag}}'

      - name: Upload archive
        uses: actions/upload-artifact@v2
        with:
          name: skupper-router.tgz
          path: myimage.tgz

  test-image:
    name: Publish skupper-router image
    runs-on: ubuntu-latest
    needs: build-manual
    strategy:
      matrix:
        skupperGitRef: [ 0.8.7 ]

    steps:

      - name: Download math result for job 2
        uses: actions/download-artifact@v3
        with:
          name: skupper-router.tgz

      - name: push image
        run: sudo microk8s ctr -n k8s.io image import myimage.tgz

      - name: Get Go cache paths
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: Install microk8s
        run: |
          sudo snap install microk8s --classic --channel=1.21/stable
          sudo microk8s enable dns ingress registry:size=20Gi host-access:ip=10.0.1.1 metallb:10.64.140.43-10.64.140.49
          sudo microk8s status --wait-ready

      - name: Export microk8s config
        if: "${{ always() }}"
        run: |
          mkdir -p $HOME/.kube
          sudo microk8s config > $HOME/.kube/config

      - name: Checkout Skupper
        uses: actions/checkout@v2
        with:
          repository: 'skupperproject/skupper'
          ref: ${{ matrix.skupperGitRef }}
          path: 'skupper'

      - name: Restore Go cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Compile Skupper
        run: |
          make all
          sudo install skupper /usr/local/bin
        working-directory: skupper

      - name: Run Skupper integration tests
        run: |
          export QDROUTERD_IMAGE=$(cat ../image.txt)
          echo $QDROUTERD_IMAGE
          export PUBLIC_1_INGRESS_HOST=10.0.1.1
          go test -count=1 -p=1 -timeout=60m -tags=integration -v ./test/integration/...
        working-directory: skupper

      - name: Dump microk8s log (apiserver)
        if: "${{ always() }}"
        run: |
          sudo journalctl -u snap.microk8s.daemon-apiserver

      - name: Dump microk8s log (kubelet)
        if: "${{ always() }}"
        run: |
          sudo journalctl -u snap.microk8s.daemon-kubelet

      - name: Dump microk8s log (kubelite)
        if: "${{ always() }}"
        run: |
          sudo journalctl -u snap.microk8s.daemon-kubelite